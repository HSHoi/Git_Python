from pandas import DataFrame, Series

# DataFrame은 다수의 컬럼으로 구성된 2차원 형태의 자료구조로 2차원 구조의 데이터를 쉽게 조작할 수 있는 기능을 제공.

data = {'지역': ['서울', '서울', '서울', '인천', '인천'],
        '연도': [2010, 2011, 2012, 2011, 2012],
        '가격': [10, 15, 20, 3, 5]}
df = DataFrame(data)
print(df)
#    지역    연도  가격
# 0  서울  2010  10
# 1  서울  2011  15
# 2  서울  2012  20
# 3  인천  2011   3
# 4  인천  2012   5

df1 = DataFrame(data, columns=['지역', '연도', '가격'],
                index=['첫째', '둘째', '셋째', '넷째', '다섯째'])
print(df1)
#      지역    연도  가격
# 첫째   서울  2010  10
# 둘째   서울  2011  15
# 셋째   서울  2012  20
# 넷째   인천  2011   3
# 다섯째  인천  2012   5

print(df1.columns)
# Index(['지역', '연도', '가격'], dtype='object')

print(df1.values)
# [['서울' 2010 10]
#  ['서울' 2011 15]
#  ['서울' 2012 20]
#  ['인천' 2011 3]
#  ['인천' 2012 5]]

print(df1.index)
# Index(['첫째', '둘째', '셋째', '넷째', '다섯째'], dtype='object')

print(df1.연도)  # “DataFrame객체명.컬럼명” 을 통한 인덱싱
# 첫째     2010
# 둘째     2011
# 셋째     2012
# 넷째     2011
# 다섯째    2012
# Name: 연도, dtype: int64

print(df1['연도'])  # “DataFrame객체명[컬럼명]” 을 통한 인덱싱
# 첫째     2010
# 둘째     2011
# 셋째     2012
# 넷째     2011
# 다섯째    2012
# Name: 연도, dtype: int64

print(type(df1['연도']))  # 컬럼명을 통한 인덱싱 시 반환 객체 타입확인(Series)
# <class 'pandas.core.series.Series'>

print(df1[["연도", "지역"]])  # 리스트를 통한 인덱싱
#        연도  지역
# 첫째   2010  서울
# 둘째   2011  서울
# 셋째   2012  서울
# 넷째   2011  인천
# 다섯째  2012  인천

print(type(df1[["연도", "지역"]]))  # 리스트를 통한 인덱싱 시 반환 객체
# <class 'pandas.core.frame.DataFrame'>

df2 = DataFrame(data, columns=['지역', '연도', '가격', '인구'],
                index=['첫째', '둘째', '셋째', '넷째', '다섯째'])
print(df2)
#      지역    연도  가격   인구
# 첫째   서울  2010  10  NaN
# 둘째   서울  2011  15  NaN
# 셋째   서울  2012  20  NaN
# 넷째   인천  2011   3  NaN
# 다섯째  인천  2012   5  NaN

# 변경할 DataFrame의 컬럼에 대해여 인덱싱을 통한 값 지정
df2.인구 = 100
print(df2)
#      지역    연도  가격   인구
# 첫째   서울  2010  10  100
# 둘째   서울  2011  15  100
# 셋째   서울  2012  20  100
# 넷째   인천  2011   3  100
# 다섯째  인천  2012   5  100

# 변경을 위한 인덱스와 변경 값을 Series 객체로 생성하여 지정한다.
val = Series([500, 500], index=['첫째', '둘째'])
df2.인구 = val  # DataFrame 객체의 컬럼 인덱스 지정을 통해 컬럼 값을 변경한다.
print(df2)
#     지역    연도  가격     인구
# 첫째   서울  2010  10  500.0
# 둘째   서울  2011  15  500.0
# 셋째   서울  2012  20    NaN
# 넷째   인천  2011   3    NaN
# 다섯째  인천  2012   5    NaN

# 열 지우기
# del 열 인덱스(삭제하고자 하는 DataFrame 객체의 열 지정)
del df2['인구']
print(df2)
#    지역    연도  가격
# 첫째   서울  2010  10
# 둘째   서울  2011  15
# 셋째   서울  2012  20
# 넷째   인천  2011   3
# 다섯째  인천  2012   5

# 행렬 전환
print(df2.T)
#       첫째    둘째    셋째    넷째   다섯째
# 지역    서울    서울    서울    인천    인천
# 연도  2010  2011  2012  2011  2012
# 가격    10    15    20     3     5

# None 값을 포함한 총 5개의 요소로 구성된 Series 객체
s = Series([1, 2, 3, None, 5])
print(s.count())  # None 이아닌 데이터 갯수만 카운팅 함
# 4

# 2개의 열로 구성된 딕셔너리 객체 선언
data = {'연도': [2010, 2011, 2012, 2011, 2012],
        '가격': [10, 15, 20, None, 5]}

# DataFrame 객체 생성
s1 = DataFrame(data)
print(s1)
#     연도    가격
# 0  2010  10.0
# 1  2011  15.0
# 2  2012  20.0
# 3  2011   NaN
# 4  2012   5.0

print(s1.count())
# 연도    5
# 가격    4
# dtype: int64

data = {'연도': [2010, 2011, 2012, 2011, 2012],
        '가격': [10, 15, 20, 30, 5]}
s2 = DataFrame(data)
print(s2)
#      연도  가격
# 0  2010  10
# 1  2011  15
# 2  2012  20
# 3  2011  30
# 4  2012   5

print(s2.sum())
# 연도    10056
# 가격       80
# dtype: int64

# 행과 열의 전환 (전치)
s3 = s2.T
print(s3)
#        0     1     2     3     4
# 연도  2010  2011  2012  2011  2012
# 가격    10    15    20    30     5

print(s3.sum(axis = 1))
# 연도    10056
# 가격       80
# dtype: int64